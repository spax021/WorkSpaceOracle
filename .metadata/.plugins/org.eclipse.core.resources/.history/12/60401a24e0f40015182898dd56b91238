package l14Exceptions;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

public class Main {

	/*3 kinds of exception:
	 * 	1. checked exception
	 *  2. error exception
	 *  3. runtime exception*/
	
    private List<Integer> list;
    private static final int SIZE = 10;
    
    //List of numbers
    public Main () {
        list = new ArrayList<Integer>(SIZE);
        for (int i = 0; i < SIZE; i++) {
            list.add(new Integer(i));
        }
    }

    public void writeList() {
	// The FileWriter constructor throws IOException, which must be caught.
        PrintWriter out = null;
        try{
        System.out.println("Usao u try");
        out =  new PrintWriter(new FileWriter("OutFile.txt"));
        for (int i = 0; i < SIZE; i++) {
            // The get(int) method throws IndexOutOfBoundsException, which must be caught.
            out.println("Value at: " + i + " = " + list.get(i));
        	}
        }catch (IndexOutOfBoundsException e){
        	System.out.println("IndexOutOfBoundsException: " + e.getMessage());
        }catch (IOException e){
        	System.out.println("IOException: " + e.getMessage());
        }
        /*catch (IOException|SQLException ex) {
    		logger.log(ex);		if you have two arguments in exception, catch parameter is final, and you cant put
    		throw ex;			any values in block
		}*/
        
        //runtime system always executes finally block
        finally{ //best practice is to put finally block because resources can leak
        	if(out != null){ //best posible reason
        		System.out.println("Closing PrintWriter.");
                out.close();        		
        	} else {
        		System.out.println("PrintWriter not opened.");
        	}
        }

    }
    
    static String readFirstLineFromFile(String path) throws IOException {
    	try (BufferedReader br = new BufferedReader(new FileReader(path))){
    		return br.readLine();
    	}
    }
    
    static String readFirstLineFromFileWithFinallyBlock(String path) throws IOException {
    	BufferedReader br = new BufferedReader(new FileReader(path));
    	try{
    		return br.readLine();
    	}finally{
    		if(br != null)
    			br.close();
    	}
    }
    
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}

}
